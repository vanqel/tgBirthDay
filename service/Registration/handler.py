from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.enums import ParseMode

from database.database import database_manager
from service.utils.filter import IsTrueDialog
from .filter import RegistrationFilter, IsRegister
from .stepform import StepsForm
from .utils import service
from ..utils.scheduler import sendDayInChat

birthday = Router(name="birthday_register")


@birthday.message(IsTrueDialog(), Command(commands='register'))
async def birthday_start(msg: Message, state: FSMContext):
    if not await service.isRegistration(user_id=msg.from_user.id):
        await msg.answer(text="<b>–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
                         parse_mode=ParseMode.HTML)
        await state.set_state(StepsForm.GET_NAME)
    else:
        await msg.answer("<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>", parse_mode=ParseMode.HTML)


# –ò–≤–∞–Ω
@birthday.message(StepsForm.GET_NAME)
async def birthday_get_name(msg: Message, state: FSMContext):
    if len(msg.text) > 30:
        await msg.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 30 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(name=msg.text)
    await msg.answer(f"<b>{msg.text}, —Ä–∞–¥ —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º</b>"
                     f"\n–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω —à–∞–≥ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–æ—á–∫–æ–≤\n"
                     f"–í–≤–µ–¥–∏—Ç–µ. —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:", parse_mode=ParseMode.HTML)
    await state.set_state(StepsForm.GET_DATE)


# –∞—Ç–∞
@birthday.message(StepsForm.GET_DATE)
async def birthday_get_date(msg: Message, state: FSMContext):
    valide = service.validate_date(msg.text)
    if valide[0]:
        await state.update_data(date=valide[1])
        context_data = await state.get_data()
        name = context_data.get('name')
        date = context_data.get('date')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–î–∞",
                    callback_data='1'
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–µ—Ç",
                    callback_data='0'
                )
            ]
        ])
        await msg.answer(f"<b>{name}, –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å {date}?</b> \n –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                         reply_markup=markup,
                         parse_mode=ParseMode.HTML)
        await state.set_state(StepsForm.GET_YESNO)
    else:
        await msg.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ :—Å")


@birthday.callback_query(StepsForm.GET_YESNO)
async def add_user_end(call: CallbackQuery, state: FSMContext, bot: Bot):
    if call.data == '1':
        context = await state.get_data()
        await service.add_user(user_id=call.from_user.id, login=call.from_user.username, date=context['date'],
                               name=context['name'])
        await state.clear()
        await sendDayInChat(bot, target_user=call.from_user.id)
        await call.message.answer("<b>–Ø –≤–Ω—ë—Å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫</b> ü•≥\n"
                                  "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ –±—ã —Ç–µ–±–µ –ø–æ–¥–∞—Ä–∏–ª–∏ —á—Ç–æ —Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, —Å–æ–∑–¥–∞–π —Å–≤–æ–π –≤–∏—à –ª–∏—Å—Ç - /wishes",
                                  parse_mode=ParseMode.HTML)
    else:
        await call.message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(StepsForm.GET_NAME)
    await call.answer()


@birthday.message(IsTrueDialog(), IsRegister(), Command(commands='clearme'))
async def delete_user_start(msg: Message, state: FSMContext):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–∞",
                callback_data='1'
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–µ—Ç",
                callback_data='0'
            )
        ]
    ])
    await msg.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=markup)

    await state.set_state(StepsForm.DELETE_USER)


@birthday.callback_query(StepsForm.DELETE_USER)
async def delete_user_end(call: CallbackQuery, state: FSMContext):
    if call.data == '1':
        await service.deleteUser(call.from_user.id)
        await call.answer()
        await state.clear()
        await call.message.answer("–ù–∞–º –≥—Ä—É—Å—Ç–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∞—Ç—å—Å—è. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ–≤–µ–ª–∏ –≤—Ä–µ–º—è —Å –Ω–∞–º–∏!")
    else:
        await call.message.answer("–û—á–µ–Ω—å –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏")
        await call.answer()
        await state.clear()


@birthday.message(IsTrueDialog(), IsRegister(),Command(commands='wishes'))
async def set_wishes(msg: Message, state: FSMContext):
    try:
        a = database_manager.get_about(msg.from_user.id)[0]
    except:
        a = " –ü—É—Å—Ç–æ "
    async def update():
        await state.set_state(StepsForm.UPDATE_ABOUT)
        return "Update"
    if a is None:
        a = "*–ø—É—Å—Ç–æ*"
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å",
                                 callback_data=await update())
        ]
    ])
    await msg.answer(text=f"<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–∏—à –ª–∏—Å—Ç:</b> {a}", reply_markup=markup, parse_mode=ParseMode.HTML)


@birthday.callback_query(StepsForm.UPDATE_ABOUT)
async def update_wishes(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ü§î\n"
                              "<blockquote>–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /cancel</blockquote>", parse_mode=ParseMode.HTML)
    await call.answer()
    await state.clear()
    await state.set_state(StepsForm.UPDATE_ABOUT1)


@birthday.message(StepsForm.UPDATE_ABOUT1)
async def set_new_about(msg: Message, state: FSMContext):
    if msg.text != '/cancel':
        database_manager.update_about(msg.from_user.id, msg.text)
        await msg.answer(text="–Ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª –≤–∏—à –ª–∏—Å—Ç ü§ó")
        await service.send_new_about(msg.from_user.id,msg.text)
    else:
        await msg.answer(text="–û—Å—Ç–∞–≤–∏–º –≤—Å—ë –∫–∞–∫ –±—ã–ª–æ üò¨")

    await set_wishes(msg, state)
