from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Message

from database.database import database_manager
from service.Registration import isRegister
from service.utils.filter import IsNoTrueDialog
from .utils import service
from ..utils.pyro import app
from ..utils.utils import logger

manager_chat = Router(name="Chat_Manager")



@manager_chat.message(IsNoTrueDialog(), Command(commands='start'))
async def manager(msg: Message, bot: Bot):

    markup1 = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                url="https://t.me/birthdaycsat_bot",
            )
        ]
    ])
    if await isRegister(msg.from_user.id):
        await msg.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup1)
    else:
        await msg.answer(text="–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—ë –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –≤ <b>–Ω–∞—à</b> –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫", reply_markup=markup1,
                         parse_mode=ParseMode.HTML)

@manager_chat.message(IsNoTrueDialog(), Command(commands='restart'))
async def restart_add_link(msg: Message):
    try:
        await app.join_chat(msg.chat.id)
        async for member in app.get_chat_members(chat_id=int(msg.chat.id)):
            if not member.user.is_bot:
                await service.add_user_chat(user_id=member.user.id,chat_id=msg.chat.id)
            logger(f"user_id={member.user.username},chat_id={msg.chat.id}")
    except Exception as ex:
        await msg.answer(text="<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∞—à–µ–º —á–∞—Ç–∏–∫–µ</b>\n\n"                
                              "<blockquote>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /restart</blockquote>",
                         parse_mode=ParseMode.HTML)
        logger(f"call manager_chat {ex}")

@manager_chat.message(F.new_chat_members)
async def send_welcome(message: Message, bot: Bot):
    markup1 = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                url="https://t.me/birthdaycsat_bot",
            )
        ]
    ])
    bot_obj = await bot.get_me()
    bot_id = bot_obj.id
    for chat_member in message.new_chat_members:
        if chat_member.id == bot_id:
            await bot.send_message(message.chat.id,
                                   text="<b>–†–∞–¥ —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è, –º–µ–Ω—è –∑–æ–≤—É—Ç —Ñ–∞–Ω—Ç–∏–∫</b>\n–Ø –Ω–∞–ø–æ–º–Ω—é –≤—Å–µ–º "
                                        "–∫–æ–ª–ª–µ–≥–∞–º –æ —Ç–≤–æ—ë–º –¥–Ω–µ –∏ –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å "
                                        f"—Å–±–æ—Ä –Ω–∞ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ—á–µ–∫, \n\n "
                                        f"–¢–∞–∫ —á—Ç–æ –∑–∞–ª–µ—Ç–∞–π—Ç–µ –∫–æ –º–Ω–µ –≤ –ª–∏—á–∫—É, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è :)",
                                   reply_markup=markup1,
                                   parse_mode=ParseMode.HTML)
            try:
                async for member in app.get_chat_members(chat_id=int(message.chat.id)):
                    if not member.user.is_bot:
                        await service.add_user_chat(user_id=member.user.id, chat_id=message.chat.id)
                    logger(f"user_id={member.user.username},chat_id={message.chat.id}")
            except Exception as ex:
                await message.answer(text="<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∞—à–µ–º —á–∞—Ç–∏–∫–µ üôÅ</b>",
                                 parse_mode=ParseMode.HTML)
                logger(f"call manager_chat {ex}")
        else:
            await bot.send_message(chat_id=message.chat.id,
                                   reply_markup=markup1,
                                   text=f"<b>@{chat_member.username}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é</b>\n"
                                        f"–ó–∞–ø–æ–ª–Ω—è–π —Ñ–æ—Ä–º–æ—á–∫—É –∏ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫üòá")
            await service.add_user_chat(user_id=chat_member.id, chat_id=message.chat.id)

@manager_chat.message(F.left_chat_member)
async def send_welcome(message: Message):
    await service.delete_user_chat(chat_id=message.chat.id, user_id=message.left_chat_member.id)
    await service.delete_chat(chat_id=message.chat.id)


